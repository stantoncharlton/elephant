<div class="page_header">
  <h1><%= @survey.name %></h1>
</div>


<div class="well">
  <div>
    <b>Add New Survey Point</b>
    <br>
    <br>
  </div>
  <div class="form" data-form="new_survey_point">
    <%= form_for SurveyPoint.new, remote: true do |f| %>

        <%= f.hidden_field :survey_id, value: @survey.id %>

        <i class="icon-arrow-down"></i>
        <%= f.text_field :measured_depth, placeholder: "Measured Depth", class: "txtfield extra-small tooltip-info",
                         "data-placement" => "bottom",
                         "data-title" => "Measured Depth" %>

        <i class="icon-resize-full"></i>
        <%= f.text_field :inclination, placeholder: "Inclination", class: "txtfield extra-small tooltip-info",
                         "data-placement" => "bottom",
                         "data-title" => "Inclination" %>

        <i class="icon-screenshot"></i>
        <%= f.text_field :azimuth, placeholder: "Azimuth", class: "txtfield extra-small tooltip-info",
                         "data-placement" => "bottom",
                         "data-title" => "Azimuth" %>

        <%= f.submit "Add Survey Point",
                     class: "bluebtn pull-right form-loading-on-click",
                     "data-form" => "new_survey_point" %>


        <% if false %>
            <br>
            <i class="icon-comment"></i>
            <%= f.text_field :comment, placeholder: "Comment", class: "txtfield txtfield-long tooltip-info",
                             "data-placement" => "bottom",
                             "data-title" => "Point Comment" %>
        <% end %>
    <% end %>
  </div>

  <div class="form-loading hidden" data-form="new_survey_point">
    <%= render 'layouts/inline_loading', title: "Adding survey point..." %>
    <br><br>
  </div>
</div>

<div>
  <span><div class='well-plan'></div> Well Plan</span>
  <span class='push-right-small'><div class='active-survey'></div> Active Survey</span>
</div>

<div id="chartdiv" class='inline-block' style="width: 500px; height: 500px;"></div>

<div id="chartdiv2" class='inline-block' style="width: 400px; height: 500px;"></div>

<div class='push-down'>
  <div class="list-item-column list-item-column-short">M. Depth</div>
  <div class="list-item-column list-item-column-short">Inclination</div>
  <div class="list-item-column list-item-column-short">Azimuth</div>
  <div class="list-item-column list-item-column-short">TVD</div>
  <div class="list-item-column list-item-column-short">V Sect</div>
  <div class="list-item-column list-item-column-short">NS</div>
  <div class="list-item-column list-item-column-short">EW</div>
  <div class="list-item-column list-item-column-count">BR</div>
  <div class="list-item-column list-item-column-count">TR</div>
  <div class="list-item-column list-item-column-count">DLS</div>
</div>
<hr>

<% calculated_points_survey = @survey.calculated_points %>
<% calculated_points = @active_well_plan.calculated_points %>

<% last_point = nil %>
<% index = 0 %>
<div id="list">
  <% calculated_points_survey.each do |point| %>
      <%= render 'survey_points/survey_point', point: point, last_point: last_point %>
      <% last_point = point %>
      <% index += 1 %>
      <% if index % 5 == 0 %>
          <br>
      <% end %>
  <% end %>
</div>

<script type="text/javascript">

    var chart;
    <% combined_tvd_vs = calculated_points.select{ |p| !p.comment.blank? }.map { |point| {"tvd" => point.true_vertical_depth.round(1), "vs" => point.vertical_section.round(1), "comment" => point.comment} } %>
    <% calculated_points_survey.each do |p| %>
    <% combined_tvd_vs << { "tvd2" => p.true_vertical_depth.round(1), "vs2" => p.vertical_section.round(1) } %>
    <% end %>
    var chartData = <%= raw combined_tvd_vs.to_json.html_safe %>;

    var chart2;
    <% combined_ns_ew = calculated_points.select{ |p| !p.comment.blank? }.map { |point| {"ns" => point.north_south.round(1), "ew" => point.east_west.round(1), "comment" => point.comment} } %>
    <% calculated_points_survey.each do |p| %>
    <% combined_ns_ew << { "ns2" => p.north_south.round(1), "ew2" => p.east_west.round(1) } %>
    <% end %>
    var chartData2 = <%= raw combined_ns_ew.to_json.html_safe %>;


    AmCharts.ready(function () {

        // SERIAL CHART
        chart = new AmCharts.AmXYChart();
        chart.pathToImages = "http://www.amcharts.com/lib/3/images/";
        chart.dataProvider = chartData;


        var valueAxis = new AmCharts.ValueAxis();
        valueAxis.title = "Vertical Section";
        valueAxis.position = "bottom";
        valueAxis.dashLength = 5;
        valueAxis.axisAlpha = 0;
        valueAxis.autoGridCount = true;
        valueAxis.minimum = -200;
        chart.addValueAxis(valueAxis);

        var valueAxis = new AmCharts.ValueAxis();
        valueAxis.title = "True Vertical Depth";
        valueAxis.position = "left";
        valueAxis.dashLength = 5;
        valueAxis.axisAlpha = 0;
        valueAxis.autoGridCount = true;
        valueAxis.reversed = true;
        chart.addValueAxis(valueAxis);


        // GRAPH
        var graph = new AmCharts.AmGraph();
        graph.xField = "vs";
        graph.yField = "tvd";
        graph.type = "smoothedLine";
        graph.bullet = "round";
        graph.balloonText = "<b>[[comment]]</b><br> TVD [[tvd]] ft, VS [[vs]] ft";
        graph.bulletColor = "#FFFFFF";
        graph.bulletBorderColor = "#00BBCC";
        graph.bulletBorderAlpha = 1;
        graph.bulletBorderThickness = 2;
        graph.bulletSize = 7;
        graph.title = "tvd";
        graph.lineThickness = 2;
        graph.lineColor = "#00BBCC";
        graph.clustered = true;
        chart.addGraph(graph);

        // GRAPH
        var graph = new AmCharts.AmGraph();
        graph.xField = "vs2";
        graph.yField = "tvd2";
        graph.type = "smoothedLine";
        graph.bullet = "round";
        graph.balloonText = "<b>Survey</b><br> TVD [[tvd2]] ft, VS [[vs2]] ft";
        graph.bulletColor = "#FFFFFF";
        graph.bulletBorderColor = "#cc4800";
        graph.bulletBorderAlpha = 1;
        graph.bulletBorderThickness = 2;
        graph.bulletSize = 0;
        graph.title = "tvd";
        graph.lineThickness = 2;
        graph.lineColor = "#cc4800";
        graph.clustered = true;
        chart.addGraph(graph);

        // CURSOR
        var chartCursor = new AmCharts.ChartCursor();
        chartCursor.cursorPosition = "mouse";
        chart.addChartCursor(chartCursor);


        // WRITE
        chart.write("chartdiv");

        var label = $("g[cursor=pointer]");
        if (label.length > 0) {
            var tspan = label.find('tspan');
            if (tspan.length > 0) {
                label.remove();
            }
        }

        var circle = $('#chartdiv').find('circle[stroke=#cc4800]:last');
        var increasing = true;
        var pulse = function () {
            var radius = parseFloat(circle.attr('r'));
            if(increasing) {
                radius += 0.5;
            }
            else {
                radius -= 0.5;
            }
            if(radius > 5) {
                increasing = false;
            }
            if(radius < 3.5) {
                increasing = true;
            }
            circle.attr('r', radius);
            setTimeout(pulse, 120);
        };

        setTimeout(pulse, 120);


        // SERIAL CHART
        chart2 = new AmCharts.AmXYChart();
        chart2.pathToImages = "http://www.amcharts.com/lib/3/images/";
        chart2.dataProvider = chartData2;


        var valueAxis = new AmCharts.ValueAxis();
        valueAxis.title = "East/West";
        valueAxis.position = "bottom";
        valueAxis.dashLength = 5;
        valueAxis.axisAlpha = 0;
        valueAxis.integersOnly = false;
        valueAxis.gridCount = 10;
        chart2.addValueAxis(valueAxis);


        var valueAxis = new AmCharts.ValueAxis();
        valueAxis.title = "North/South";
        valueAxis.position = "left";
        valueAxis.dashLength = 5;
        valueAxis.axisAlpha = 0;
        valueAxis.integersOnly = false;
        valueAxis.gridCount = 10;
        valueAxis.reversed = true;
        chart2.addValueAxis(valueAxis);


        // GRAPH
        var graph = new AmCharts.AmGraph();
        graph.xField = "ew";
        graph.yField = "ns";
        graph.type = "smoothedLine";
        graph.bullet = "round";
        graph.balloonText = "<b>[[comment]]</b> [[ns]], [[ew]]";
        graph.bulletColor = "#FFFFFF";
        graph.bulletBorderColor = "#00BBCC";
        graph.bulletBorderAlpha = 1;
        graph.bulletBorderThickness = 2;
        graph.bulletSize = 7;
        graph.title = "ns";
        graph.lineThickness = 2;
        graph.lineColor = "#00BBCC";
        graph.clustered = true;
        chart2.addGraph(graph);

        var graph = new AmCharts.AmGraph();
        graph.xField = "ew2";
        graph.yField = "ns2";
        graph.type = "smoothedLine";
        graph.bullet = "round";
        graph.balloonText = "<b>Survey</b> [[ns2]], [[ew2]]";
        graph.bulletColor = "#FFFFFF";
        graph.bulletBorderColor = "#cc4800";
        graph.bulletBorderAlpha = 1;
        graph.bulletBorderThickness = 2;
        graph.bulletSize = 0;
        graph.title = "ns";
        graph.lineThickness = 2;
        graph.lineColor = "#cc4800";
        graph.clustered = true;
        chart2.addGraph(graph);

        // CURSOR
        var chartCursor = new AmCharts.ChartCursor();
        chartCursor.cursorPosition = "mouse";
        chart2.addChartCursor(chartCursor);


        // WRITE
        chart2.write("chartdiv2");

        var label = $("g[cursor=pointer]");
        if (label.length > 0) {
            var tspan = label.find('tspan');
            if (tspan.length > 0) {
                label.remove();
            }
        }

        var circle2 = $('#chartdiv2').find('circle[stroke=#cc4800]:last');
        var increasing2 = true;
        var pulse2 = function () {
            var radius = parseFloat(circle2.attr('r'));
            if(increasing2) {
                radius += 0.5;
            }
            else {
                radius -= 0.5;
            }
            if(radius > 5) {
                increasing2 = false;
            }
            if(radius < 3.5) {
                increasing2 = true;
            }
            circle2.attr('r', radius);
            setTimeout(pulse2, 120);
        };

        setTimeout(pulse2, 120);
    });


</script>