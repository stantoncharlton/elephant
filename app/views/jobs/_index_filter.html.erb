<div>
  <% if show_stats && !current_user.role.limit_to_assigned_jobs? %>
      <div class="well">
        <%= render 'jobs/index_parts/jobs_count', jobs: @jobs %>
      </div>
  <% end %>



  <% if false %>
      <% if !current_user.role.limit_to_assigned_jobs? %>
          <% options = [] %>
          <% options << ["All Jobs", 0] %>
          <% if !current_user.role.no_assigned_jobs? && current_user.jobs.any? %>
              <% options << ["Only My Jobs", 1] %>
          <% end %>
          <% options << ["Pre-Job", 2] %>
          <% options << ["In-Progress", 3] %>
          <% options << ["Post-Job", 4] %>
          <div class="pull-right push-up">
            <%= select_tag "jobs_filter", options_for_select(options, 0),
                           id: "jobs_filter",
                           class: "inline  custom-select tooltip-info align-top push-up",
                           "data-placement" => "right",
                           "data-title" => "Filter which jobs are shown..." %>
          </div>

          <div class="" style="margin-top: -10px; margin-bottom: 10px;">
            <%= form_tag jobs_path, :method => 'get', :id => "jobs_search", remote: true,
                         class: "filter-search-box" do %>
                <%= text_field_tag :search, params[:search],
                                   placeholder: "Filter jobs by name",
                                   class: "search-query tooltip-info",
                                   style: "font-family: 'gothamlightregular';",
                                   :autocomplete => "off",
                                   "data-placement" => "left",
                                   "data-title" => "Filter jobs by name" %>
                <%= link_to "#", class: "btn btn-danger white-text push-right-small hidden",
                            id: "clear_job_search" do %>
                    <i class="icon-remove icon-white"></i> clear
                <% end %>
            <% end %>
          </div>
      <% end %>

  <% end %>

  <%= render 'jobs/index_list' %>


  <% if show_map %>
      <script type='text/javascript'>
          <% if @jobs.empty? %>
          var map = L.mapbox.map('map', 'elephant.map-vum3on5g');
          map.attributionControl = false;
          <% else %>
          var map = L.mapbox.map('map', 'elephant.map-vum3on5g');
          map.markerLayer.setGeoJSON([]);
          map.attributionControl = false;
          map.scrollWheelZoom.disable();

          var geoJson = [];

          <% coordinates_for_zoom = [] %>
          <% @jobs.each do |job| %>
          <% if !job.well.location.blank? %>
          <% x = job.well.x_location %>
          <% y = job.well.y_location  %>
          <% coordinates_for_zoom << [y, x] %>
          geoJson.push({
              "type": "Feature",
              "geometry": {
                  "type": "Point",
                  "coordinates": [<%= x %>, <%= y %>]
              },
              "properties": {
                  title: '<%= job.field.name + ' | ' + job.well.name %>',
                  'marker-size': 'medium',
                  'marker-color': '<%= job.status_color %>',
                  url: '/jobs/' + <%= job.id %>
                  //'marker-symbol': '1'
              }
          });
          <% end %>
          <% end %>


          map.markerLayer.setGeoJSON(geoJson);

          map.markerLayer.on('click', function (e) {
              map.panTo(e.layer.getLatLng());
          });
          map.markerLayer.on('click', function (e) {
              e.layer.unbindPopup();
              window.location = e.layer.feature.properties.url;
          });

          var bounds = [];
          <% coordinates_for_zoom.each do |c| %>
          bounds.push([<%= c[0] %>, <%= c[1] %>]);
          <% end %>
          map.fitBounds(bounds);
          zoom = Math.round(map.getZoom());
          if (zoom > 8) {
              map.setZoom(8);
          }


          map.markerLayer.on('mouseover', function (e) {
              e.layer.openPopup();
          });
          map.markerLayer.on('mouseout', function (e) {
              e.layer.closePopup();
          });

          $('.expand-map-box').live("click", function () {
              if ($('.expand-text').text() == 'expand') {
                  map.scrollWheelZoom.enable();
                  $('body').animate({scrollTop: 0 }, 'fast')
                  $('html, body').css("overflow", "hidden");
                  $('.expand-text').text('collapse');
                  $('.map-container').css('position', 'absolute');
                  $('.map-container').css('left', '0');
                  $('.map-container').css('top', '0');
                  $('.map-container').css('height', '100%');
                  $('.map-container').css('width', '100%');
                  $('.map-container').css('z-index', '10000000');
                  $('#map').css('height', '100%');
                  $('.map-views').removeClass('hidden');
                  $('.map-container').find('.corners').hide();
              }
              else {
                  map.scrollWheelZoom.disable();
                  $('html, body').css("overflow", "auto");
                  $('.expand-text').text('expand');
                  $('.map-container').css('position', 'relative');
                  $('.map-container').css('left', '0');
                  $('.map-container').css('top', '0');
                  $('.map-container').css('width', '100%');
                  $('.map-container').css('height', '300px');
                  $('.map-container').css('z-index', '20');
                  $('.map-views').addClass('hidden');
                  $('.map-container').find('.corners').show();
              }
              map._onResize();
              return false;
              <% end %>

          });
      </script>
  <% end %>
</div>