<% provide(:title, I18n.t("jobs.index.title")) %>

<div class="page_header">

  <h1><%= t ".title" %></h1>

  <h2>
    <% if @is_paged %>
        <%= ((Integer(params[:page]) - 1) * 20) + 1 %>
        - <%= [((Integer(params[:page]) - 1) * 20) + 20, @jobs.count].min %> of <%= @jobs.count.to_s %>
    <% else %>
        1 - <%= @jobs.count %> of <%= @jobs.count %>
    <% end %>
  </h2>

  <%= link_to "+ " + I18n.t("jobs.index.new"), new_job_path, class: "bluebtn pull-right tooltip-info",
              "data-placement" => "bottom",
              "data-title" => "Create new job" %>

</div>

<% if !@is_paged %>
    <% if !current_user.role.limit_to_assigned_jobs? %>
        <div class="well">
          <%= render 'jobs/index_parts/jobs_count', jobs: current_user.company.jobs %>
        </div>
    <% end %>
<% end %>

<div class="map-container">
  <div id='map' class='dark' style='width:100%;height:300px;'></div>
  <div class='corners'>
    <div class="corner tlcorner"></div>
    <div class="corner trcorner"></div>
    <div class="corner brcorner"></div>
    <div class="corner blcorner"></div>
  </div>

  <div class='expand-map-box'>
    <%= link_to "#" do %>
        <span class='expand-text'>expand</span> <i class="icon-resize-vertical icon-white"></i>&nbsp;
    <% end %>
  </div>
</div>
<br><br>

<% if !current_user.role.limit_to_assigned_jobs? %>
    <% options = [] %>
    <% options << ["All Jobs", 0] %>
    <% if !current_user.role.no_assigned_jobs? && current_user.jobs.any? %>
        <% options << ["Only My Jobs", 1] %>
    <% end %>
    <% options << ["Pre-Job", 2] %>
    <% options << ["In-Progress", 3] %>
    <% options << ["Post-Job", 4] %>
    <div class="pull-right push-up">
      <%= select_tag "jobs_filter", options_for_select(options, 0),
                     id: "jobs_filter",
                     class: "inline  custom-select tooltip-info align-top push-up",
                     "data-placement" => "right",
                     "data-title" => "Filter which jobs are shown..." %>
    </div>

    <div class="" style="margin-top: -10px; margin-bottom: 10px;">
      <%= form_tag jobs_path, :method => 'get', :id => "jobs_search", remote: true,
                   class: "filter-search-box" do %>
          <%= text_field_tag :search, params[:search],
                             placeholder: "Filter jobs by name",
                             class: "search-query tooltip-info",
                             style: "font-family: 'gothamlightregular';",
                             :autocomplete => "off",
                             "data-placement" => "left",
                             "data-title" => "Filter jobs by name" %>
          <%= link_to "#", class: "btn btn-danger white-text push-right-small hidden",
                      id: "clear_job_search" do %>
              <i class="icon-remove icon-white"></i> clear
          <% end %>
      <% end %>
    </div>
<% end %>


<%= render 'jobs/index_list' %>


<script type='text/javascript'>
    var map = L.mapbox.map('map', 'elephant.map-vum3on5g');
    map.attributionControl = false;
    map.scrollWheelZoom.disable();

    var geoJson = [];

    <% coordinates_for_zoom = [] %>
    <% @jobs.each do |job| %>
    <% if !job.well.location.blank? %>
    <% x = job.well.x_location %>
    <% y = job.well.y_location  %>
    <% coordinates_for_zoom << [y, x] %>
    geoJson.push({
        "type": "Feature",
        "geometry": {
            "type": "Point",
            "coordinates": [<%= x %>, <%= y %>]
        },
        "properties": {
            title: '<%= job.field.name + ' | ' + job.well.name %>',
            'marker-size': 'medium',
            'marker-color': '<%= job.status_color %>',
            url: '/jobs/' + <%= job.id %>
            //'marker-symbol': '1'
        }
    });
    <% end %>
    <% end %>


    map.markerLayer.setGeoJSON(geoJson);

    map.markerLayer.on('click', function (e) {
        map.panTo(e.layer.getLatLng());
    });
    map.markerLayer.on('click', function (e) {
        e.layer.unbindPopup();
        window.location = e.layer.feature.properties.url;
    });

    var bounds = [];
    <% coordinates_for_zoom.each do |c| %>
    bounds.push([<%= c[0] %>, <%= c[1] %>]);
    <% end %>
    map.fitBounds(bounds);
    zoom = Math.round(map.getZoom());
    if (zoom > 8) {
        map.setZoom(8);
    }


    map.markerLayer.on('mouseover', function (e) {
        e.layer.openPopup();
    });
    map.markerLayer.on('mouseout', function (e) {
        e.layer.closePopup();
    });

    $('.expand-map-box').live("click", function () {
        if ($('.expand-text').text() == 'expand') {
            map.scrollWheelZoom.enable();
            $('body').animate({scrollTop: 0 }, 'fast')
            $('html, body').css("overflow", "hidden");
            $('.expand-text').text('collapse');
            $('.map-container').css('position', 'absolute');
            $('.map-container').css('left', '0');
            $('.map-container').css('top', '0');
            $('.map-container').css('height', '100%');
            $('.map-container').css('width', '100%');
            $('.map-container').css('z-index', '10000000');
            $('#map').css('height', '100%');
            $('.map-views').removeClass('hidden');
            $('.map-container').find('.corners').hide();
        }
        else {
            map.scrollWheelZoom.disable();
            $('html, body').css("overflow", "auto");
            $('.expand-text').text('expand');
            $('.map-container').css('position', 'relative');
            $('.map-container').css('left', '0');
            $('.map-container').css('top', '0');
            $('.map-container').css('width', '100%');
            $('.map-container').css('height', '300px');
            $('.map-container').css('z-index', '20');
            $('.map-views').addClass('hidden');
            $('.map-container').find('.corners').show();
        }
        map._onResize();
        return false;
    });
</script>

